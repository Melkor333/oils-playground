#!/usr/bin/env ysh

# Weird name, provides 'log' and 'die'
#source --builtin osh/two.sh
use ./ctx.ysh

proc _haynode (...args;self;;block) {
  var type 
  var out = {
    type: self.name,
    args: args
  }
  var c = {children: []}
  ctx push (c) {
    var attrs = io->evalToDict(block)
  }
  #setvar out.attrs = attrs
  setvar out.children = c.children
  ctx emit children (out)
}

var _hayProto = Object(null, {__invoke__:_haynode})
proc define (name) {
  call setVar(name, Object(_hayProto, {name:name}), global=true)
}
proc get (;out) {
  ctx get (out)
}

var __provide__ = :| define get |

if is-main {
  var code = $(cat $[ARGV[0]])
  var block = parseCommand(code)
  call io->eval(block)
  get (&h)
  = h
}
