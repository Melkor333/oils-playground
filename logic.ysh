#!/usr/bin/env ysh
# https://dusa.rocks/docs/introductions/asp/

var DEBUGLVL = 3
setglobal MAX_PROC = 10
var temp = $(mktemp -d)
setglobal ENV.FACTFD = $(mktemp $temp/facts.XXX)
setglobal ENV.NEWFD = $(mktemp $temp/newfacts.XXX)
setglobal ENV.LOCKDIR = $(mktemp -d $temp/lockdir.XXX)
setglobal ENV.PSFD = $(mktemp $temp/ps.XXX)
proc debug {
if (int(${#FUNCNAME[@]}) > DEBUGLVL) { return }
  echo ${#FUNCNAME[@]} DEBUG ${FUNCNAME[@]} - @[ARGV] >&2
}
proc debug-val (name;val) {
if (int(${#FUNCNAME[@]}) > DEBUGLVL) { return }
  echo ${#FUNCNAME[@]} DEBUG ${FUNCNAME[@]}: $name - $(pp value (val)) >&2
}

# a list of facts, against which the current needs to be checked
var facts = []

# a list of predicates and they're atoms
var current_set = {}


# FACTS
proc - (...ARGV;;fd=ENV.FACTFD) {
  debug-val "deduping fact" (ARGV)
  if (facts=>indexOf(ARGV) === -1) {
    debug-val "new fact" (ARGV)
    call facts->append(ARGV)
    debug-val "writing fact to" (fd)
    write $(json write (ARGV) | tr -d '\n') >> $fd
  }
}

proc WHEN (...condition;;;block) {
    tail -f -n +0 $[ENV.FACTFD] | {
      var facts = []
      var lockfile = $(mktemp -u $[ENV.LOCKDIR]/rule.XXXXXXXXXX)
      while (true) {
        try { read --raw-line (&line) }
        if (_error.code === 1) {
          break
        }
        touch $lockfile
        debug "touched $lockfile"
        write $line | json read (&fact)
        debug "rule got new fact"
        debug-val fact (fact)
        call facts->append(fact)
        # If predicate of first condition and fact are the same, do a loop
        # with all the currently known facts
        debug-val fact (fact)
        debug-val "condition" (condition)
        if (fact[0] === condition[0]) {
          evalCondition (condition, block, facts, fact)
        }
        rm $lockfile
        debug "removed $lockfile"
      }
  }
  echo $! >> $[ENV.PSFD]
}

# cond -> Condition to be evaluated [[[COND1][COND2]], [[FACT1],[FACT2]]]
# facts -> Existing facts [[FACT],[FACT],...]
# pred -> List of already defined predicates to meet condition
proc evalCondition(;condition, block, facts, fact) {
  var placeholders = {}
  var param
  debug-val "current facts" (facts)
  assert [len(condition) === len(fact)] # args need to match
  # check conditions/fill in placeholders.
  # TODO: pass down (by copy)
  for i, val in (fact) {
    setvar param = condition[i]
    debug-val placeholders (placeholders)
    debug-val val (val)
    debug-val param (param)
    # replace/check placeholders
    if (param=>startsWith(/ [ 'A'-'Z' ] /)) {
      if (placeholders=>get(param) is not null) {
        if (val !== placeholders[param]) {
          debug doesnt match:
          debug-val "condition" (conditions[num_pred])
          debug-val "val" (val)
          debug-val 'placeholders' (placeholders)
            return
        } else {
	  continue
	}
      }
      setvar placeholders[param] = val
    } elif (param === val) {
      continue
    } else {
      debug "$param !== $val, aborting"
      return
    }
  }
  debug-val 'placeholders' (placeholders)
  { call io->eval(block, vars=placeholders) } &
}

# TODO: pass this to worker proc
source $[ARGV[0]]

var wait = false
# main process
while (true) {
  # TODO: while working children
  fork { inotifywait -t 2 -qqre DELETE $[ENV.LOCKDIR] }
  var p = $!
  # if last file was deleted preliminary
  if (len($(ls $[ENV.LOCKDIR])) === 0) {
    debug "race?!"
    kill $p
  } else {
    debug "no race. waiting"
    setvar waiting = false
    try { wait $p } 2>/dev/null
  }
  try { read -t 0 --raw-line (&line) }
  if (_error.code === 1) {
    if (len($(ls $[ENV.LOCKDIR])) > 0) {
      debug "there are still locks, continue"
      continue
    } elif (wait) {
      debug "couldn't read. finished?"
      break
    } else {
      debug waiting
      sleep 0.4 # give time for rules to start
      setvar wait = true
      find $temp
      continue
    }
  }
  debug "Generated fact: $line"
  try { write $line | json read (&fact) }
  if (_error.code === 1) {
    debug "failure to read?! $line"
    continue
  }

  - @fact (fd=ENV.FACTFD)
} < $[ENV.NEWFD]
# TODO: wait for all processes to finish with some kind of semaphore
#for child in (children) {
#  kill $child
#}
redir < $[ENV.PSFD] {
  while read ps {
  echo kill $ps
    try { kill $ps }
  }
}
= facts
debug $(rm -rv $temp)

# NEW IDEA
#--------------------------------------------------
# External Objects
# factsfd -> file with all facts (for multiple workers)
# newfd -> file (could be a fifo) where workers pass new filedesceiptors
# condfd -> where new conditions are spawned
# lockdir -> workers create a lockfile when processing facts/conditions
#--------------------------------------------------
# Internal Objects
# Condition -> dict, unique
#   facts -> id of factlist
#   condition -> what needs to be true
#   statement -> what to execute when condition is met
#
# facts -> list, one per process (main + worker)
#   0 = facts.
#   1+ = possibilities. might be nulled atany point in time.
#
# conditionlist -> array, main worker
#   list of confition.condition to not allow the same condition twice
#

# ==================================================
#
# main proc
# -> gather and dedupe new facts (optionally separate)
# -> gather new conditions (optionally separate)
#    -> feed them to worker
# -> if no lockfile: stop workers, cleanup
#
#--------------------------------------------------
# worker process
# -> check for new conditionals
#    until cond->index == worker->index: process facts
# -> for new fact, for condition: process fact
