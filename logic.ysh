#!/usr/bin/env ysh
# https://dusa.rocks/docs/introductions/asp/

# Configs
# -------------------------
# -1 = infinite, 1 = no server/
setglobal MAX_PROC = 1
# How to hash the code for comparison.
# md5 -> run `ysh -n` on the string and hash that
# string -> just compare the raw src code
# md5 takes about double the time for `edge` with a single worker/server infra
# TODO: bench if duplicate WHEN become a problem!
setglobal hash_format = "md5"
var DEBUGLVL = 0
var DEBUG_VARS = :|solution|

# Setup per processes
# -------------------------
# TODO: -1 should spawn a process per condition
if (MAX_PROC > 1 or MAX_PROC === -1) {
  var temp = $(mktemp -d)
  # Main writes facts, all workers read
  setglobal ENV.FACTFD = "$temp/facts"
  touch $[ENV.FACTFD]

  # Workers send facts/conditions to server
  # dict -> condition
  # list -> fact
  setglobal ENV.CALLBACKFD = "$temp/control"
  mkfifo $[ENV.CALLBACKFD]

  # Server sends conditions, an idle worker picks it up
  if (MAX_PROC > 1) {
    setglobal ENV.WORKFD = "$temp/work"
    mkfifo $[ENV.WORKFD]
  }

  # TODO: Separate process should do the logging and stats?
  # TODO: logfile per Worker?
  #setglobal ENV.LOGFD = "$temp/mainlog"
  #mkfifo $[ENV.LOGFD]

  #setglobal ENV.LOCKDIR = $(mktemp -d $temp/lockdir.XXX)
  #setglobal ENV.PSFD = $(mktemp $temp/ps.XXX)
} else {
  # must be set as it's a default argument
  setglobal ENV.FACTFD = null
}

# globals for stats
# -------------------------
# todo: make a module?
setglobal evaluated_conditions = 0
setglobal evaluated_blocks = 0
setglobal duplicate_when = 0
setglobal duplicate_facts = 0

setglobal YSH = $(which ysh)
setglobal nesting = 0
setglobal WORKER = false
# a list of facts, against which the current needs to be checked
setglobal FACTS = []
setglobal cursor = 0
setglobal PROCS = 1

use tui.ysh

# Helpers
# -------------------------
proc Block ( ; out; ; block) {
  call out->setValue(block)
}

proc md5(;;;b) {
  var sum = $(echo $[b.sourceCode().code_str] | $YSH -n | md5sum)=>split(" ")[0]
  echo $sum
}

proc stats {
  var c = 0
  for _, v in (conditions) {
    setvar c += len(v)
  }
  ... tui log-with-footer
    "$[ARGV=>join(' ')]"
    "Conditions: $c facts: $[len(FACTS)]"
    "Evaluated conditions: $evaluated_conditions Evaluated blocks: $evaluated_blocks"
    "duplicate WHEN: $duplicate_when duplicate facts: $duplicate_facts"
    ;
}

proc debug {
var lvl = int(${#FUNCNAME[@]}) - 2
if (lvl > DEBUGLVL) { return }
  stats "$$lvl DEBUG ${FUNCNAME[@]} - $[ARGV=>join(' ')]"
}

proc debug-val (name;val) {
  if (DEBUG_VARS=>indexOf(name) === -1) {
    return
  }
  var lvl = int(${#FUNCNAME[@]}) - 2
  if (lvl > DEBUGLVL) { return }
  #echo ${#FUNCNAME[@]} DEBUG ${FUNCNAME[@]}: $name - $(pp value (val)) >&2
  stats "$lvl DEBUG ${FUNCNAME[@]}: $name - $(pp value (val))"
}


# NEW FACT!
proc - (...ARGV) {
  if (WORKER) {
    json write (ARGV) | tr -d '\n' >> $[ENV.CALLBACKD] &
    return
  }
  debug-val "deduping fact" (ARGV)
  if (FACTS=>indexOf(ARGV) === -1) {
    debug-val "new fact" (ARGV)
    call FACTS->append(ARGV)
    # communicate if there are more processes
    if (MAX_PROC > 1) {
      debug-val "writing fact to" (fd)
      json write (ARGV) | tr -d '\n' >> $[ENV.FACTFD]
    }
  } else {
    setglobal duplicate_facts += 1
  }
}

# { pred: [[args/placeholders], block, hash] }
setglobal conditions = {}

proc catchup_condition(;conditionSet) {
  for i in (0 ..< cursor) {
    var fact = FACTS[i]
    debug-val "fact" (fact)
    if (fact[0] === conditionSet[0][0]) {
      evalCondition (conditionSet[0], conditionSet[1], fact)
      debug-val "facts" (FACTS)
    }
  }
}

# add a new condition to our list of conditions
proc WHEN (pred, ...condition;;;block) {
  if (WORKER) {
    ... json write ({
          pred,
          condition,
          block: block.sourceCode().code_str
	    }) | tr -d '\n' >> $[ENV.CALLBACKFD] &
	  return
  }
  if (conditions=>get(pred) is null) {
    setglobal conditions[pred] = []
  }
  var sum
  case (hash_format) {
    md5 {
      setvar sum = $(md5 (;;block))
    }
    string {
      setvar sum = block.sourceCode().code_str
    }
  }
  var conditionSet = [[pred] ++ condition, block, sum]
  var duplicate = false
  for i in (conditions[pred]) {
    if (i[2] === conditionSet[2] and i[0] === conditionSet[0]) {
      setvar duplicate = true
      break
    }
  }
  if (duplicate) {
    setglobal duplicate_when += 1
    return
  }
  call conditions[pred]->append(conditionSet)

  if (MAX_PROC > 1) {
    # pass work to existing worker
    json write (conditionSet) >> $[ENV.WORKFD]
  } elif (MAX_PROC === 1) {
    # catchup
    catchup_condition (conditionSet)
  } else {
    # start new worker per condition
    assert [MAX_PROC === -1]
    TODO: start new worker bee!
    fork {
      # we only care about this condition!
      setglobal conditions = { pred: [conditionSet] }
      setglobal WORKER = true
      catchup_condition (conditionSet)
      work
    }
  }
}

# read a fact from stdin
# used to communicate between processes
func readJson(input) {
  try {
    read --raw-line (&line) 
    write $line | json read (&m)
  }
  if (_error.code === 1) {
    return (null)
  }
  # TODO: figure out if new fact or new condition
  debug "got new json message"
  debug-val fact (m)
  return (m)
}

func setupReader(fd) {
  if test -p $fd {
    return ([null, fd])
  }
  # read the whole file and follow
  tail -f -n +0 $fd >{reader} &
  return ([$!, reader])
}

proc work() {
    if (WORKER) {
      # TODO: kill reader at the end?
      var _, newfacts = setupReader(ENV.FACTFD)
      var FACTS = []
    }

    #var lockfile = $(mktemp -u $[ENV.LOCKDIR]/rule.XXXXXXXXXX)
    while (true) {
      if (WORKER) {
        # TODO: if MAX_PROC > 1 -> check for conditions
        var fact = readJson(newfacts)
        if (fact is null) {
          break
        }
	# TODO: optimize if MAX_PROC = -1, only care about matching facts!
        call FACTS->append(fact)
      } else {
        if (cursor === len(FACTS)) {
          break
        }
        assert [cursor < len(FACTS)]
        setvar fact = FACTS[cursor]
      }
      debug new fact to process
      debug-val fact (fact)
      for condition in (conditions=>get(fact[0], [])) {
        debug-val "working on condition" (condition)
        evalCondition (condition[0], condition[1], fact)
      }
      setglobal cursor += 1
    }
    debug finished work
  }

# TODO: "Start workers..."
# echo $! >> $[ENV.PSFD]

# check if a fact matches a condition and execute the block if it does
# fact -> the fact to be checked
proc evalCondition(;condition, block, fact) {
  setglobal evaluated_conditions += 1
  var placeholders = {}
  var param

  assert [len(condition) === len(fact)] # args need to match

  # check condition/fill in placeholders.
  for i, val in (fact) {
    setvar param = condition[i]
    # replace/check placeholders
    if (param=>startsWith(/ [ 'A'-'Z' ] /)) {
      if (placeholders=>get(param) is not null) {
        if (val !== placeholders[param]) {
          debug doesnt match:
          debug-val "val" (val)
          debug-val 'placeholders' (placeholders)
            return
        } else {
	  continue
	}
      }
      debug-val param (param)
      debug param is null
      setvar placeholders[param] = val
      debug-val placeholders (placeholders)
    } elif (param === val) {
      debug param is correct
      continue
    } else {
      debug "$param !== $val, aborting"
      return
    }
  }
  #debug-val 'placeholders' (placeholders)
  setglobal nesting += 1
  setglobal evaluated_blocks += 1
  debug-val nesting (nesting)
  call io->eval(block, vars=placeholders)
  setglobal nesting -= 1
}

source $[ARGV[0]]
if (MAX_PROC > 0) {
  work
}

# main process
#var wait = false
#while (true) {
#  # TODO: while working children
#  fork { inotifywait -t 2 -qqre DELETE $[ENV.LOCKDIR] }
#  var p = $!
#  # if last file was deleted preliminary
#  if (len($(ls $[ENV.LOCKDIR])) === 0) {
#    debug "race?!"
#    kill $p
#  } else {
#    debug "no race. waiting"
#    setvar waiting = false
#    try { wait $p } 2>/dev/null
#  }
#  try { read -t 0 --raw-line (&line) }
#  if (_error.code === 1) {
#    if (len($(ls $[ENV.LOCKDIR])) > 0) {
#      debug "there are still locks, continue"
#      continue
#    } elif (wait) {
#      debug "couldn't read. finished?"
#      break
#    } else {
#      debug waiting
#      sleep 0.4 # give time for rules to start
#      setvar wait = true
#      find $temp
#      continue
#    }
#  }
#  debug "Generated fact: $line"
#  try { write $line | json read (&fact) }
#  if (_error.code === 1) {
#    debug "failure to read?! $line"
#    continue
#  }
#
#  - @fact (fd=ENV.FACTFD)
#} < $[ENV.NEWFD]
# TODO: wait for all processes to finish with some kind of semaphore
#for child in (children) {
#  kill $child
#}
#redir < $[ENV.PSFD] {
#  while read ps {
#  echo kill $ps
#    try { kill $ps }
#  }
#}
#debug $(rm -rv $temp)
echo
debug-val solution (FACTS)
write

# NEW IDEA
#--------------------------------------------------
# External Objects
# global factsfd -> file with all facts (for multiple workers)
# condfd (FIFO) -> anonymous pipe where idle workers grab new conditions
# statusfd (worker stdout) -> anonymous pipe where the worker sends new conditions and his cursor when waiting for new facts/conditions (or just it's PID)
#--------------------------------------------------
# Internal Objects
# Condition -> dict, unique
#   condition -> what needs to be true
#   statement -> what to execute when condition is met
#   (facts -> id of factlist)
#
# facts -> list of lists, one per process (main + worker)
#   0 = facts.
#   1+ = possibilities. might be nulled atany point in time.
#
# conditionlist -> list/dict
#   main: list of condition.condition to not allow the same condition twice
#   worker: dict of conditions (per pred) to check each fact against

# ==================================================
#
# main proc
# -> gather and dedupe new facts (optionally separate)
# -> gather (and dedupe) new conditions (optionally separate)
#    -> feed them to worker
#    -> if all workers report back idle. Finished!
#    -> Manual decisions? (custom proc 'interactive' { ... }' to instruct the worker to pass it back to the main
#
#--------------------------------------------------
# worker process
# -> check for new conditionals
#    until cond->index == worker->index: process facts
# -> for new fact, for condition: process fact
# -> on 'interactive' -> send block to Main
