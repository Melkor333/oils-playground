#!/usr/bin/env ysh
# https://dusa.rocks/docs/introductions/asp/

var DEBUGLVL = 5
var DEBUG_VARS = :||
setglobal nesting = 0
setglobal WORKER = false
setglobal MAX_PROC = 10
#var temp = $(mktemp -d)
#setglobal ENV.FACTFD = $(mktemp $temp/facts.XXX)
setglobal ENV.FACTFD = null
#setglobal ENV.NEWFD = $(mktemp $temp/newfacts.XXX)
#setglobal ENV.LOCKDIR = $(mktemp -d $temp/lockdir.XXX)
#setglobal ENV.PSFD = $(mktemp $temp/ps.XXX)


setglobal evaluated_conditions = 0
setglobal evaluated_blocks = 0
setglobal duplicate_when = 0
setglobal duplicate_facts = 0

# DO NOT USE.
# CAUSES SEGFAULTS! ?!
source tui.ysh
proc stats {
  ... log-with-footer
    "$[ARGV=>join(' ')]"
    "Conditions: $[len(conditions)] facts: $[len(FACTS)]"
    "Evaluated conditions: $evaluated_conditions Evaluated blocks: $evaluated_blocks"
    #abc
    "duplicate WHEN: $duplicate_when duplicate facts: $duplicate_facts"
    ;
}

proc debug {
if (int(${#FUNCNAME[@]}) > DEBUGLVL) { return }
  stats "${#FUNCNAME[@]} DEBUG ${FUNCNAME[@]} - $[ARGV=>join(' ')]"
}

proc debug-val (name;val) {
  if (DEBUG_VARS=>indexOf(name) === -1) {
    return
  }
  if (int(${#FUNCNAME[@]}) > DEBUGLVL) { return }
  #echo ${#FUNCNAME[@]} DEBUG ${FUNCNAME[@]}: $name - $(pp value (val)) >&2
  stats "${#FUNCNAME[@]} DEBUG ${FUNCNAME[@]}: $name - $(pp value (val))"
}

# a list of facts, against which the current needs to be checked
setglobal FACTS = []
setglobal cursor = 0
setglobal PROCS = 1

# NEW FACT!
proc - (...ARGV;;fd=ENV.FACTFD) {
  debug-val "deduping fact" (ARGV)
  if (FACTS=>indexOf(ARGV) === -1) {
    debug-val "new fact" (ARGV)
    call FACTS->append(ARGV)
    # communicate if there are more processes
    if (PROCS > 1) {
      debug-val "writing fact to" (fd)
      write $(json write (ARGV) | tr -d '\n') >> $fd
    }
  } else {
    setglobal duplicate_facts += 1
  }
}

# { pred: [[args/placeholders], block, NUM] }
setglobal conditions = {}

# add a new condition to our list of conditions
proc WHEN (pred, ...condition;;;block) {
  if (conditions=>get(pred) is null) {
    setglobal conditions[pred] = []
  }
  var conditionSet = [[pred] ++ condition, block, block.sourceCode().location_start_line]
  var duplicate = false
  for i in (conditions[pred]) {
    if (i[2] === conditionSet[2] and i[0] === conditionSet[0]) {
      setvar duplicate = true
      break
    }
  }
  if (not duplicate) {
    call conditions[pred]->append(conditionSet)
    # TODO: if worker?
    for i in (0 ..< cursor) {
      var fact = FACTS[i]
      debug-val "fact" (fact)
      if (fact[0] === conditionSet[0][0]) {
        evalCondition (conditionSet[0], conditionSet[1], fact)
        debug-val "facts" (FACTS)
      }
    }
  } else {
    setglobal duplicate_when += 1
  }
}

# read a fact from stdin
# used to communicate between processes
func readFact(input) {
  try {
    read --raw-line (&line) 
    write $line | json read (&fact)
  }
  if (_error.code === 1) {
    return (null)
  }
  # TODO: figure out if new fact or new condition
  debug "got new fact"
  debug-val fact (fact)
  return (fact)
}

func setupReader() {
  # read new facts
  tail -f -n +0 $[ENV.FACTFD] >{newfacts} &
  return ([$!, newfacts])
}

proc work() {
    if (WORKER) {
      var reader, newfacts = setupReader()
      var FACTS = []
    }

    #var lockfile = $(mktemp -u $[ENV.LOCKDIR]/rule.XXXXXXXXXX)
    while (true) {
      if (WORKER) {
        var fact = readFact(newfacts)
        if (fact is null) {
          break
        }
        call FACTS->append(fact)
      } else {
        setglobal cursor += 1
        if (cursor === len(FACTS)) {
          break
        }
        assert [cursor < len(FACTS)]
        setvar fact = FACTS[cursor]
      }
      debug new fact to process
      debug-val fact (fact)
      for condition in (conditions[fact[0]]) {
        debug-val "working on condition" (condition)
        evalCondition (condition[0], condition[1], fact)
      }
    }
    debug finished work
  }

# TODO: "Start workers..."
# echo $! >> $[ENV.PSFD]

# check if a fact matches a condition and execute the block if it does
# fact -> the fact to be checked
proc evalCondition(;condition, block, fact) {
  setglobal evaluated_conditions += 1
  var placeholders = {}
  var param

  assert [len(condition) === len(fact)] # args need to match
  # check condition/fill in placeholders.
  for i, val in (fact) {
    setvar param = condition[i]
    # replace/check placeholders
    if (param=>startsWith(/ [ 'A'-'Z' ] /)) {
      if (placeholders=>get(param) is not null) {
        if (val !== placeholders[param]) {
          debug doesnt match:
          debug-val "val" (val)
          debug-val 'placeholders' (placeholders)
            return
        } else {
	  continue
	}
      }
      debug-val param (param)
      debug param is null
      setvar placeholders[param] = val
      debug-val placeholders (placeholders)
    } elif (param === val) {
      debug param is correct
      continue
    } else {
      debug "$param !== $val, aborting"
      return
    }
  }
  #debug-val 'placeholders' (placeholders)
  setglobal nesting += 1
  setglobal evaluated_blocks += 1
  debug-val nesting (nesting)
  call io->eval(block, vars=placeholders)
  setglobal nesting -= 1
}

source $[ARGV[0]]
work

# main process
#var wait = false
#while (true) {
#  # TODO: while working children
#  fork { inotifywait -t 2 -qqre DELETE $[ENV.LOCKDIR] }
#  var p = $!
#  # if last file was deleted preliminary
#  if (len($(ls $[ENV.LOCKDIR])) === 0) {
#    debug "race?!"
#    kill $p
#  } else {
#    debug "no race. waiting"
#    setvar waiting = false
#    try { wait $p } 2>/dev/null
#  }
#  try { read -t 0 --raw-line (&line) }
#  if (_error.code === 1) {
#    if (len($(ls $[ENV.LOCKDIR])) > 0) {
#      debug "there are still locks, continue"
#      continue
#    } elif (wait) {
#      debug "couldn't read. finished?"
#      break
#    } else {
#      debug waiting
#      sleep 0.4 # give time for rules to start
#      setvar wait = true
#      find $temp
#      continue
#    }
#  }
#  debug "Generated fact: $line"
#  try { write $line | json read (&fact) }
#  if (_error.code === 1) {
#    debug "failure to read?! $line"
#    continue
#  }
#
#  - @fact (fd=ENV.FACTFD)
#} < $[ENV.NEWFD]
# TODO: wait for all processes to finish with some kind of semaphore
#for child in (children) {
#  kill $child
#}
#redir < $[ENV.PSFD] {
#  while read ps {
#  echo kill $ps
#    try { kill $ps }
#  }
#}
#debug $(rm -rv $temp)
echo
= FACTS

# NEW IDEA
#--------------------------------------------------
# External Objects
# factsfd -> file with all facts (for multiple workers)
# newfd -> file (could be a fifo) where workers pass new filedesceiptors
# condfd -> where new conditions are spawned
# lockdir -> workers create a lockfile when processing facts/conditions
#--------------------------------------------------
# Internal Objects
# Condition -> dict, unique
#   facts -> id of factlist
#   condition -> what needs to be true
#   statement -> what to execute when condition is met
#
# facts -> list, one per process (main + worker)
#   0 = facts.
#   1+ = possibilities. might be nulled atany point in time.
#
# conditionlist -> array, main worker
#   list of confition.condition to not allow the same condition twice
#

# ==================================================
#
# main proc
# -> gather and dedupe new facts (optionally separate)
# -> gather new conditions (optionally separate)
#    -> feed them to worker
# -> if no lockfile: stop workers, cleanup
#
#--------------------------------------------------
# worker process
# -> check for new conditionals
#    until cond->index == worker->index: process facts
# -> for new fact, for condition: process fact
