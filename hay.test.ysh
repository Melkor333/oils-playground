#!/usr/bin/env ysh

setglobal oils_failures_allowed = 4
use hay.ysh
shopt -u strict_errexit
setglobal REPO_ROOT = $(pwd)

# Hay: Hay Ain't YAML
setglobal count = 0
var failcount = 0
var acceptedfails = 0 # count of failed but OK
proc testcase (
    ...n; ...asserts;
    status=0, skip=false, fails=false,
    stdout='', stderr='';
    block) {
    setglobal count += 1
  var name = n=>join(" ")
  if (status is not null) {
    call asserts->insert(0, ^[status === out.status])
  }
  if (stdout is not null) {
    call asserts->insert(0, ^[stdout === out.stdout])
  }
  if (stderr is not null) {
    call asserts->insert(0, ^[stderr === out.stderr])
  }

  write --end '' "$name - "
  if (skip) {
    echo "Skipped"
    return
  }
  # TODO: maybe something like ysh <<<$block=>getCommand()
  # to run as separate process!
  var tmpdir = $(mktemp -d)
  cd $tmpdir {
    var out = io.captureAll(block)
  }
  rm -r $tmpdir

  var failed = false
  for a in (asserts) {
    var assertOut = io.captureAll(^(shopt --unset verbose_errexit; assert (a);))
    if (assertOut.status !== 0) {
      if (not failed) {
        if (fails) {
	  write "Excepted failure"
	} else {
          write "Failed!"
	}
      }
      setvar failed = true
      if (not fails) {
        write $[assertOut.stdout=>trim()]
      }
    }
  }

  if (failed) {
    setglobal failcount += 1
    if (fails) {
      setglobal acceptedfails += 1
    } else {
      = out
    }
  }

  if (not failed) {
    write 'Success'
  }
}

func sanitizeFd(fd) {
  if (fd === '-') {
    return ('/dev/stdin')
  } else { return (fd) }
}
# read json into dic, compare, print json diff if they're actually different
proc json-diff (one, two) {
  read --all (&a) < $[sanitizeFd(one)]
  read --all (&b) < $[sanitizeFd(two)]
  try {
    assert [fromJson(a) === fromJson(b)]
    return
  }
  echo $one >&2
  echo $two >&2
  try {
    diff <(write $one | sort) <(write $two | sort)
    diff <(write $one) <(write $two)
  }
  return $?
}
# --------------------------------------

testcase hay builtin usage (
    stdout="""
    status=2
    status=0
    read 0
    greater 0
    """) {

  try {
    hay define 2>/dev/null
  }
  echo status=$_status
  
  hay define -- package user
  echo status=$?
  
  hay pp | wc -l | read n
  echo read $?
  test $n -gt 0
  echo greater $?
}

testcase hay reset (
   stderr=null,
   stdout="""
   package 0
   reset 0
   """,
   status=127 ) {
  shopt --set parse_brace
  
  hay define package
  
  hay eval (&a) {
    package foo
    echo "package $?"
  }
  
  hay reset  # no more names
  
  echo "reset $?"
  
  hay eval (&b) {
    package foo
    echo "package $?"
  }
}

# ' in name needs quoting
testcase "hay eval can't be nested" (
    stdout="""
    foo
    """,
    stdout=null,
    stderr=null,
    status=127 ) {
  shopt --set parse_brace
  
  hay eval (&foo) {
    echo foo
    hay eval (&bar) {
      echo bar
    }
  }
}

testcase hay names at top level (
    stdout="""
    status=0
    1 one
    status=0
    1 two
    status=0
    1 three
    """,
    # probably not implement
    skip=true) {
  shopt --set parse_brace parse_at
  shopt --unset errexit
  
  hay define Package
  
  Package one
  echo status=$?
  
  var args = _hay()['children'][0]['args']
  write --sep ' ' $[len(_hay()['children'])] @args
  
  hay eval (&result) {
    Package two
    echo status=$?
  }
  
  setvar args = result['children'][0]['args']
  write --sep ' ' $[len(result['children'])] @args
  
  Package three
  echo status=$?
  
  setvar args = _hay()['children'][0]['args']
  write --sep ' ' $[len(_hay()['children'])] $[_hay()['children'][0]['args'][0]]
}

testcase "Parsing Nested Attributes nodes (bug fix)" (
    status=2, stderr=null,
    # no idea why this should fail, it exits 0
    skip=true) {
  shopt --set parse_brace parse_equals
  
  hay define Package/License
  
  hay eval (&out) {
  Package glibc {
    version = '1.0'
  
    License {
      path = 'LICENSE.txt'
    }
  
    other = 'foo'
  }
  }
  
  #json write (_hay()) | jq '.children[0].children[0].attrs' > actual.txt
  json write (out) | jq '.children[0].children[0].attrs' > actual.txt
  
  json-diff - actual.txt <<EOF
{
  "path": "LICENSE.txt"
}
EOF
  
  # TODO: the test suite exits here during parsing...!
  #invalid = 'syntax'  # parse error
}

testcase hay eval Attr node, and JSON (
    stdout="""
    diff 0
    """,
  ) {
  shopt --set parse_brace parse_equals
  
  hay define Package User
  
  hay eval (&result) {
    Package foo {
      # not doing floats now
      int = 42
      bool = true
      mynull = null
      mystr = $'spam\n'
  
      mylist = [5, 'foo', {}]
      # TODO: Dict literals need to be in insertion order!
      #mydict = {alice: 10, bob: 20}
    }
  
    User alice
  }
  
  # Note: using jq to normalize
  json write (result) | jq . > out.txt
  
  json-diff - out.txt <<EOF
{
  "source": null,
  "children": [
    {
      "type": "Package",
      "args": [
        "foo"
      ],
      "attrs": {
        "int": 42,
        "bool": true,
        "mynull": null,
        "mystr": "spam\\n",
        "mylist": [
          5,
          "foo",
          {}
        ]
      },
      "children": []
    },
    {
      "type": "User",
      "args": [
        "alice"
      ]
    }
  ]
}
EOF
  
  echo "diff $?"
}

testcase hay eval shell node, and JSON (
    # proc not yet implemented
    # TODO: TASK -> proc TASK
    ) {
  shopt --set parse_brace parse_equals
  
  hay define TASK
  
  hay eval (&result) {
    TASK { echo hi }
  
    TASK {
      echo one
      echo two
    }
  }
  
  #= result
  json write (result) | jq . > out.txt
  
  json-diff - out.txt <<'EOF'
{
  "source": null,
  "children": [
    {
      "type": "TASK",
      "args": [],
      "location_str": "./hay.test.ysh",
      "location_start_line": 305,
      "code_str": "           echo hi "
    },
    {
      "type": "TASK",
      "args": [],
      "location_str": "./hay.test.ysh",
      "location_start_line": 307,
      "code_str": "          \n      echo one\n      echo two\n    "
    }
  ]
}
EOF
}

testcase "_hay() register" (
  stdout="""
    1
    2
    0
    """,
    # _hay() missing
    # TODO: toplevel impossible
    fails=true) {
  shopt --set parse_paren parse_brace parse_equals parse_proc
  
  hay define user
  
  var result = {}
  
  hay eval (&result) {
  
    user alice
    # = _hay()
    write -- $[len(_hay()['children'])]
  
    user bob
    setvar result = _hay()
    write -- $[len(_hay()['children'])]
  
  }
  
  # TODO: Should be cleared here
  setvar result = _hay()
  write -- $[len(_hay()['children'])]
}

testcase haynode builtin can define nodes (
    stdout="""
    level 0 children
    1
    level 1 children
    2
    level 0 children
    2
    """) {
  shopt --set parse_paren parse_brace parse_equals parse_proc
  
  # It prints JSON by default?  What about the code blocks?
  # Or should there be a --json flag?
  
  hay eval (&result) {
  
    # note that 'const' is required because haynode isn't capitalized
    hay node parent alice {
      var age = '50'
      
      hay node child bob {
        # TODO: Is 'const' being created in the old ENCLOSING frame?  Not the new
        # ENCLOSED one?
        var age = '10'
      }

      hay node child carol {
	var age = '20'
      }

      var other = 'str'
    }
  }

  write -- 'level 0 children' $[len(result['children'])]
  write -- 'level 1 children' $[len(result['children'][0]['children'])]

  hay eval (&result) {
    hay node parent foo
    hay node parent bar
  }
  write -- 'level 0 children' $[len(result['children'])]
}

testcase "haynode: usage errors (name or block required)" (
    stdout="""
    haynode attr 2
    LEN 0
    haynode code 2
    LEN 0
    ---
    define attr 2
    LEN 0
    define code 2
    LEN 0
    """) {
  shopt --set parse_brace parse_equals parse_proc
  
  # should we make it name or block required?
  # license { ... } might be useful?
  
  try {
    hay eval (&result) {
      hay node package
    }
  }
  echo "haynode attr $_status"
  echo "LEN $[len(result['children'])]"
  
  # requires block arg
  try {
    hay eval (&result) {
      hay node TASK build
    }
  }
  echo "haynode code $_status"
  echo "LEN $[len(result['children'])]"
  
  echo ---
  hay define package TASK
  
  try {
    hay eval (&result) {
      package
    }
  }
  echo "define attr $_status"
  echo "LEN $[len(result['children'])]"
  
  try {
    hay eval (&result) {
      TASK build
    }
  }
  echo "define code $_status"
  echo "LEN $[len(result['children'])]"
}

testcase "haynode: shell nodes require block args; attribute nodes don't" (
    stdout="""
    status 0
    status 2
    """) {
  shopt --set parse_brace parse_equals parse_proc
  
  hay define package TASK
  
  try {
    hay eval (&result) {
      package glibc > /dev/null
    }
  }
  echo "status $_status"
  
  
  try {
    hay eval (&result) {
      TASK build
    }
  }
  echo "status $_status"
}

testcase hay eval with shopt -s ysh:all (
    stdout="""
    foo bar
    """) {
  #shopt --set parse_brace parse_equals parse_proc
  
  hay define Package
  
  const x = 'foo bar'
  
  hay eval (&result) {
    echo $x
    Package foo {
      # set -e should be active!
      #false
  
      version = '1.0'
  
      # simple_word_eval should be active!
      y = x
      #write -- $x
    }
  }
}

testcase Attr block with duplicate names (
  status=1,stderr=null, stdout=null) {
  shopt --set ysh:upgrade
  
  hay define Package
  
  Package cpython {
    version = '3.11'
    version = '3.12'
  }
  
  = _hay()
}

testcase Scope of Variables Inside Hay Blocks (
    stdout="""
    location = https://example.com/downloads/foo.tar.gz
    backup = https://archive.example.com/downloads/foo.tar.gz
    deps location https://example.com/downloads/spam.tar.gz
    deps backup https://archive.example.com/downloads/spam.tar.xz
    AFTER downloads/foo.tar.gz
    """) {
  shopt --set ysh:all
  
  hay define package
  hay define deps/package
  
  hay eval (&result) {
  
    const URL_PATH = 'downloads/foo.tar.gz'
  
    package foo {
      echo "location = https://example.com/$URL_PATH"
      echo "backup = https://archive.example.com/$URL_PATH"
    }
  
    # Note: PushTemp() happens here
    deps spam {
      # OVERRIDE
      const URL_PATH = 'downloads/spam.tar.gz'
  
      const URL2 = 'downloads/spam.tar.xz'
  
      package foo {
        # this is a global
        echo "deps location https://example.com/$URL_PATH"
        echo "deps backup https://archive.example.com/$URL2"
      }
    }
  
    echo "AFTER $URL_PATH"
  
  }
}

testcase Nested bare assignment (
    stdout="""
    """) {
  shopt --set ysh:all
  
  hay define Package/Deps
  
  hay eval (&out) {
    Package {
      x = 10
      Deps {
        # this is a const
        x = 20
      }
    }
  }
  
  json-diff - <(json write (out)) <<EOF
{
  "source": null,
  "children": [
    {
      "type": "Package",
      "args": [],
      "children": [
        {
          "type": "Deps",
          "args": [],
          "children": [],
          "attrs": {
            "x": 20
          }
        }
      ],
      "attrs": {
        "x": 10
      }
    }
  ]
}
EOF

}

testcase Param with same name as Hay attribute (
    stdout="""
    {
      "variant": null,
      "port": 80
    }
    """,
    # apparently objects aren't visible inside the proc call. bug?
    fails=true) {
  shopt --set ysh:all
  
  # Danilo reported this on Zulip
  
  hay define Service
  
  proc gen-service(; ; variant = null) {
    Service {
      variant = variant
      port = 80
    }
  }
  
  hay eval (&out) {
    = Service
    gen-service 
    gen-service (variant = 'z')
  }
  
  var attrs = out.children[0].attrs
  json write (attrs)
}

testcase hay define and then an error (
    status=127,
    stdout="""
    user 0
    package 0
    TASK 0
    inside
    license 0
    license 0
    """,
    stderr=null,
    # hay pp not implemented
    fails=true) {
  shopt --set parse_brace parse_equals parse_proc
  
  hay define Package/License User TASK
  
  hay pp defs > /dev/null
  
  hay eval (&result) {
    User bob
    echo "user $?"
  
    Package cppunit
    echo "package $?"
  
    TASK build {
      configure
    }
    echo "TASK $?"
  
    Package unzip {
      version = '1.0'
  
      License FOO {
        echo 'inside'
      }
      echo "license $?"
  
      License BAR
      echo "license $?"
  
      zz foo
      echo 'should not get here'
    }
  }
  
  echo 'ditto'
}

testcase "parseHay()" (
    stdout="""
    OK
    """,
    # not implemented?
    fails=true) {
  shopt --set parse_proc
  
  const config_path = "$REPO_ROOT/spec/testdata/config/ci.oil"
  const block = parseHay(config_path)
  
  # Are blocks opaque?
  {
    = block
  } | wc -l | read n
  
  # Just make sure we got more than one line?
  if test "$n" -eq 1; then
    echo "OK"
  fi
}

testcase "Code Blocks: parseHay() then shvar _DIALECT= { evalHay() }" (
    stdout="""
    level 0 children
    2
    ---
    child 0
    TASK
    cpp
    ---
    child 1
    TASK
    publish-html
    ---
    """,
    fails=true) {
  shopt --set parse_brace parse_proc
  
  hay define TASK
  
  const config_path = "$REPO_ROOT/spec/testdata/config/ci.oil"
  const block = parseHay(config_path)
  
  shvar _DIALECT=sourcehut {
    const d = evalHay(block)
  }
  
  const children = d['children']
  write 'level 0 children' $[len(children)] ---
  
  # TODO: Do we need @[] for array expression sub?
  write 'child 0' $[children[0].type] $[join(children[0].args)] ---
  write 'child 1' $[children[1].type] $[join(children[1].args)] ---
}

testcase "evalHay() usage" (
    stdout="""
    status 3
    status 3
    status 3
    """) {
  shopt -s parse_brace
  
  try {
    var d = evalHay()
  }
  echo status $_status
  
  try {
    var d = evalHay(3)
  }
  echo status $_status
  
  try {
    var d = evalHay(^(echo hi), 5)
  }
  echo status $_status
}

testcase "Attribute / Data Blocks (package-manager)" (
    stdout="""
    level 0 children
    3
    level 1 children
    0
    """,
    # TOEO: add $REPO_ROOT and include testfile
    fails=true) {

  shopt --set parse_proc
  
  const path = "$REPO_ROOT/spec/testdata/config/package-manager.oil"
  
  const block = parseHay(path)
  
  hay define Package
  const d = evalHay(block)
  write 'level 0 children' $[len(d['children'])]
  write 'level 1 children' $[len(d['children'][1]['children'])]
}

testcase Typed Args to Hay Node (
  # not yet implemented
  fails=true) {
  shopt --set ysh:all
  
  hay define when
  
  # Hm I get 'too many typed args'
  # Ah this is because of 'haynode'
  # 'haynode' could silently pass through blocks and typed args?
  
  hay eval (&o) {
    when NAME [x > 0] { 
      const version = '1.0'
      const other = 'str'
    }
  }
  
  = o
}

testcase "OSH and hay (dynamic parsing)" (
    stdout='''
    backticks
    eval
    TYPE TASK
    CODE         
        echo `echo task backticks`
        eval 'echo task eval'
      ___
    ''',
    # TODO: make it work
    fails=true) {

  shopt --unset ysh:all

source $REPO_ROOT/spec/testdata/config/osh-hay.osh

# TODO: code not serialized correctly - Samuel brought this up
}

testcase "CODE node provides code_str, serialized code - issue #2050" (fails=true) {
  shopt --set ysh:all
  
  hay define Package
  hay define Package/INSTALL
  
  Package {
    name = "osh"
    INSTALL {
      #echo hi
  
      # The block causes a bug?  Nesting?
      cd dist {
        ./install
      }
    }
  }
  
  = _hay()
}

testcase Proc within Hay node (
  # TODO: output?
  # not yet implemented
  fails=true) {
  shopt --set ysh:all
  
  hay define Package
  
  hay eval (&o) {
  Package cpython {
    version = '3.11'
  
    proc build {
      # procs have to capture
      echo "version=$version"
      make
    }
  }
  }
  
  var build_proc = o.children[0].attrs.build
  
  = build_proc
  
  build_proc
  
  #json write (_hay())
}

testcase Using Hay node from another module (
    stdout="""
    {
      "version": "3.3"
    }
    """,
    # TODO: how to make 'use' work?
    fails=true) {
  shopt --set ysh:all
  
  hay define Package/INSTALL
  
  use $[ENV.REPO_ROOT]/spec/testdata/config/use-hay.ysh
  
  #pp test_ (_hay())
  json write (_hay().children[0].attrs)
}

testcase Defining Hay node in another module (
    stdout="""
    {
      "version": "3.3"
    }
    """,
    # TODO: copy other testfile
    fails=true) {
  shopt --set ysh:all
  
  use $[ENV.REPO_ROOT]/spec/testdata/config/define-hay.ysh
  
  Package foo {
    version = '3.3'
    INSTALL {
      echo version=$version
    }
  }
  
  json write (_hay().children[0].attrs)
}

testcase Using Hay with --eval flags (
    stdout="""
    {
      "type": "Package",
      "args": [
        "cpython"
      ],
      "children": [],
      "attrs": {
        "version": "3.12",
        "url": "https://python.org/release/3.12/",
        "build": null
      }
    }
    version = 3.12, url = https://python.org/release/3.12/
    """,
    fails=true) {
  shopt --set ysh:all
  
  echo 'hay define Package' >pre.ysh 
  
  echo '
  Package cpython {
    version = "3.12"
    url = "https://python.org/release/$version/"
    proc build {
      echo "version = $version, url = $url"
    }
  }
  ' >def.hay
  
  # TODO:
  # null_replacer=true
  # JavaScript has a second "replacer" arg, which can be a function, or an array
  # I guess you can specify replacer=null
  #
  # Invert it: Or maybe type_errors=true
  #
  # When type_errors=false (default), any unserializable value becomes null
  
  echo 'json write (_hay().children[0], type_errors=false)' > stage-1.ysh
  
  # Stage 1
  
  ... $[ENV.SH] -o ysh:all
    # TODO: restore purity
    #--eval-pure pre.ysh
    #--eval-pure def.hay
    #--eval-pure stage-1.ysh
    --eval pre.ysh
    --eval def.hay
    --eval stage-1.ysh
    -c '' 
    || true
    ;
  
  # Stage 2
  
  echo '
  var pkg = _hay().children[0]
  var build_proc = pkg.attrs.build
  build_proc
  ' > stage-2.ysh
  
  # Stage 1
  
  ... $[ENV.SH] -o ysh:all
    # TODO: restore purity
    #--eval-pure pre.ysh
    #--eval-pure def.hay
    --eval pre.ysh
    --eval def.hay
    --eval stage-2.ysh  # This one isn't pure
    -c ''
    ;
}

testcase "hay define with __invoke__" (
    stdout="""
    [
      {type: 'Package', name: 'cpython'},
      {type: 'Package', name: 'ruby'}
    ]
    """,
    fails=true) {
  var Package = invokableObject()
  
  Package cpython  # this appends tothe list
  Package ruby  # append to the list
  
  = Package.instances  # INSTEAD of _hay()
}

write "Tests: $count" "Failures: $failcount" "Expected failures: $acceptedfails" "Successful: $[count - failcount]" | column -ts :
